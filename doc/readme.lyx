#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass docbook
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry true
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
MediaTomb - UPnP Mediaserver
\end_layout

\begin_layout Date
30.12.2006
\end_layout

\begin_layout Author
\begin_inset CharStyle Firstname
status inlined

\begin_layout Standard
Sergey
\end_layout

\end_inset


\begin_inset CharStyle Surname
status inlined

\begin_layout Standard
Bostandzhyan
\end_layout

\end_inset


\end_layout

\begin_layout Section
\noindent
\align left
Requirements
\end_layout

\begin_layout Description
\noindent
\align left
Note: remember to install associated development packages, because development
 headers are needed for compilation!
\end_layout

\begin_layout Description
\noindent
\align left
Note: libupnp is now a part of MediaTomb and does not have to be installed
 separately.
 We base our heavily patched version on libupnp 1.4.1 from http://pupnp.sf.net/
\end_layout

\begin_layout Description
\noindent
\align left
Note: you need at least one database in order to compile and run MediaTomb
 - either sqlite or mysql.
\end_layout

\begin_layout Standard
\noindent
In order to compile MediaTomb you will have to install the following packages.:
\end_layout

\begin_layout Itemize
sqlite (version > 3.x) 
\begin_inset LatexCommand \url[http://www.sqlite.org/]{http://www.sqlite.org/}

\end_inset

 
\shape italic
(REQUIRED if mysql is not available)
\end_layout

\begin_layout Itemize
mysql client library (version > 4.0.x) 
\begin_inset LatexCommand \url[http://mysql.org/]{http://mysql.org/}

\end_inset

 
\shape italic
(REQUIRED if sqlite is not available)
\end_layout

\begin_layout Itemize
libmagic 
\shape italic
OPTIONAL, RECOMMENDED
\shape default
 This is the 'file' package, it is used to determine the mimetype of the
 media.
 If you don't have this you will have to enter file extension to mimetype
 mappings manually in your config file.
\end_layout

\begin_layout Itemize
js - SpiderMonkey JavaScript Engine 
\begin_inset LatexCommand \url[http://www.mozilla.org/js/spidermonkey/]{http://www.mozilla.org/js/spidermonkey/}

\end_inset


\shape italic
 (OPTIONAL, HIGHLY RECOMMENDED)
\shape default
 This package is necessary to allow the creation of virtual containers.
 The import.js script defines the layout of your media, the default import
 script will create a structure sorted by Audio/Photo/Video, it will make
 use of the gathered metadata (like ID3 tags) to sort your music by Artist/Album
/Genre/Year , etc.
 The import script can be adjusted and modified - it allows you to create
 the layout that you want.
\end_layout

\begin_layout Itemize
taglib 
\begin_inset LatexCommand \url[http://developer.kde.org/~wheeler/taglib.html]{http://developer.kde.org/~wheeler/taglib.html}

\end_inset

 
\shape italic
(OPTIONAL, RECOMMENDED) 
\shape default
This library retrieves metadata from mp3, ogg and flac files.
 You will need it if you want to have virtual objects for those files (i.e.
 nice content layout).
 
\series bold
Note: 
\series default
It makes no sense to use taglib and id3lib at the same time, the configure
 script will first look for taglib, if taglib detection fails it will search
 for id3lib.
 You can also force the script to take the library of your choice, overriding
 the default setting.
\end_layout

\begin_layout Itemize
id3lib 
\begin_inset LatexCommand \url[http://id3lib.sourceforge.net/]{http://id3lib.sourceforge.net/}

\end_inset

 (at least version 3.8.3) 
\shape italic
(OPTIONAL, RECOMMENDED if taglib is not available) 
\shape default
This library retrieves id3 tags from mp3 files.
\end_layout

\begin_layout Itemize
libexif 
\begin_inset LatexCommand \url[http://libexif.sourceforge.net/]{http://libexif.sourceforge.net/}

\end_inset

 
\shape italic
(OPTIONAL, RECOMMENDED)
\shape default
 You will need this library if you want to extract metadata from images,
 this will allow you to have virtual containers for your Photos, sorted
 by various attributes like Date, etc.
 It also enables thumbnail support: if EXIF thumbnails are present in your
 images they will also be offered via UPnP.
\end_layout

\begin_layout Itemize
libextractor 
\begin_inset LatexCommand \url[http://gnunet.org/libextractor/]{http://gnunet.org/libextractor/}

\end_inset

 
\shape italic
(OPTIONAL) 
\shape default
This library tries to gather metadata from all kinds of files (also .avi
 and .asf).
 The drawback is, that it can be very slow at scanning video files.
 We also noticed that it uses a lot of memory when reading files, the result
 is, that media import becomes extremely slow.
 It is up to you if you want to use it or not, you may try the 'extract'
 utility that is provided with the library to check if there is any metadata
 that can be extracted from your media prior to enabling this feature in
 MediaTomb.
 By defaault libextractor is disabled, use ./configure --enable-libextractor
 to activate it.
\end_layout

\begin_layout Section
Compiling From Source
\end_layout

\begin_layout Subsection
Standard Method
\end_layout

\begin_layout Standard
If you don't care about the details - make sure you have installed the required
 packages and the appropriate development headers and simply run
\end_layout

\begin_layout Code
./configure
\end_layout

\begin_layout Code
make
\end_layout

\begin_layout Code
make install
\end_layout

\begin_layout Standard
This should compile and install MediaTomb, the resulting binary is ready
 to run.
\end_layout

\begin_layout Subsection
Configure Options
\end_layout

\begin_layout Standard
The MediaTomb configure script provides a large variety of options, allowing
 you to specify the additional libraries that will be used, features that
 will be compiled or disabled, workarounds for known bugs in some distros
 and so on.
 Some options are straightforward, some require deeper knowledge - make
 sure you know what you are doing :)
\end_layout

\begin_layout Subsubsection
Install Location Of Architecture Independend Files
\end_layout

\begin_layout Code
--prefix=PREFIX
\end_layout

\begin_layout Description
Default: /usr/local
\end_layout

\begin_layout Standard
Install all architecture independent files - all .js files and .png images
 for the Web UI, the import.js script, the service description XML files
 - in the directory of your choice.
 This is especially useful if you do not want to perform a system-wide installat
ion, but want to install MediaTomb only for your user.
\end_layout

\begin_layout Description
Important: the prefix path will be compiled into the binary; the binary
 will still be relocatetable, but you move those files you will have to
 point MediaTomb to the proper location by specifying it in the server configura
tion file.
 
\end_layout

\begin_layout Subsubsection
Static Build
\end_layout

\begin_layout Code
--enable-static
\end_layout

\begin_layout Description
Default: disabled
\end_layout

\begin_layout Standard
Build a static binary.
 This may be useful if you plan to install a precompiled MediaTomb binary
 on a system that does not have all the required libraries and where installatio
n of those libraries is not possible due to reasons beyond your control.
\end_layout

\begin_layout Description
Note: if you enable this option, make sure that you have all static versions
 of the appropriate libraries installed on your system.
 The configure script may not detect that those are missing - in this case
 you will get linker errors.
 Some distributions, for example Fedora Core, do not ship static library
 versions.
\end_layout

\begin_layout Subsubsection
Automatically Create Database
\end_layout

\begin_layout Code
--enable-db-autocreate
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
Automatically create the database if it is missing (for example upon a first
 time launch).
 Disabling this will make the resulting binary a little smaller, however
 you will have to take care of the database creation yourself by invoking
 the appropriate .sql scripts that are provided with the package.
 
\end_layout

\begin_layout Description
Note: the server configuration file has to be setup correctly.
 Either sqlite or MySQL has to be chosen in the storage section, for sqlite
 the database file has to point to a writable location, for MySQL the user
 has to be setup with a valid password and permissions and the database
 
\begin_inset Quotes sld
\end_inset

mediatomb
\begin_inset Quotes srd
\end_inset

 has to exist.
\end_layout

\begin_layout Subsubsection
Debug Malloc/Realloc Of Zero bytes
\end_layout

\begin_layout Code
--enable-debug-malloc0
\end_layout

\begin_layout Description
Default: disabled
\end_layout

\begin_layout Standard
This feature is only for debugging purposes, whenever a malloc or realloc
 with a value of zero bytes is encountered, the server will termine with
 abort()
\end_layout

\begin_layout Subsubsection
Use Atomic Assembler Code For x86 Single CPU systems
\end_layout

\begin_layout Code
--enable-atomic-x86-single
\end_layout

\begin_layout Description
Default: disabled
\end_layout

\begin_layout Standard
Use assembler code suited for single CPU x86 machines.
 This may improve performance, but your binary will not function properly
 on SMP systems.
 If you specify this for a non x86 architecture the binary will not run
 at all.
 If you wonder about the purpose of assembler code in a mediaserver application:
 we need it for atomic operations that are required for reference counting.
 The pthread library will be used as a fallback for other architectures,
 but can also be forced by a designated configure option.
 This however, will have the worst performance.
 
\end_layout

\begin_layout Standard
By default x86 SMP code will be used on x86 systems - it will reliably work
 on both SMP and single CPU systems, but will not be as fast as the atomic-x86-s
ingle option on uniprocessor machines.
\end_layout

\begin_layout Subsubsection
Use Pthread Code For Atomic Operations
\end_layout

\begin_layout Code
--enable-atomic-pthread
\end_layout

\begin_layout Description
Default: autodetect
\end_layout

\begin_layout Standard
This is the default setting for non x86 architectures, we may add assembler
 optimizations for other architectures as well, but currently only x86 optimizat
ions are available.
 This option may also be safely used on x86 machines - the drawback is poor
 performance, compared to assembler optimized code.
\end_layout

\begin_layout Subsubsection
Enable X_MS_MediaReceiverRegistrar Support
\end_layout

\begin_layout Code
--enable-mrreg-service
\end_layout

\begin_layout Description
Default: disabled
\end_layout

\begin_layout Standard
This option will enable the compilation and support of the X_MS_MediaReceiverReg
istrar UPnP service, this was implemented for future Xbox 360 support.
 If you have a renderer that requires this service, you can safely enable
 it.
 It will always return true to IsValidated and IsAuthorized requests.
\end_layout

\begin_layout Subsubsection
Disable Fseeko Check
\end_layout

\begin_layout Code
--disable-fseeko-check
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
This is a workaround for a bug in some Debian distros, disable this check
 if you know that your system has largefile support, but configure fails
 to detect it.
 For more information see: ADD LINK HERE
\end_layout

\begin_layout Subsubsection
Disable Largefile Support
\end_layout

\begin_layout Code
--disable-largefile
\end_layout

\begin_layout Description
Default: auto
\end_layout

\begin_layout Standard
By default largefile support will be autodetected by configure, however
 you can disable it if you do not want it or if you experience problems
 with it on your system.
\end_layout

\begin_layout Subsubsection
Disable Redifinition Of Malloc And Realloc
\end_layout

\begin_layout Code
--disable-rpl-malloc
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
Autoconf may redefine malloc and realloc functions to rpl_malloc and rpl_realloc
, usually this will happen if the autotools think that you are compiling
 against a non GNU C library.
 Since malloc and realloc may behave different on other systems, this gives
 us the opportunity to write wrapper functions to handle special cases.
 However, this redefinition may get triggered when crosscompiling, even
 if you are compiling against the GNU C lib.
 If this is the case, you can use this option to disable the redefinition.
\end_layout

\begin_layout Subsubsection
SQLite Support
\end_layout

\begin_layout Code
--enable-sqlite3
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
The SQLite database is very easy in installation and use, you do not have
 to setup any users, permissions, etc.
 A database file will be simply created as specified in the MediaTomb configurat
ion.
 At least SQLite version 3 is required.
\end_layout

\begin_layout Subsubsection
MySQL Support
\end_layout

\begin_layout Code
--enable-mysql
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
MySQL is a very powerful database, however it requires some additional setup.
 You will find information on how to setup MediaTomb with MySQL in the Installat
ion section.
\end_layout

\begin_layout Subsubsection
Spidermonkey LibJS Support
\end_layout

\begin_layout Code
--enable-libjs
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
Spidermonkey is Mozillas JavaScript engine, it plays a very important role
 in MediaTomb.
 We use it to create a nice virtual container layout based on the metadata
 that is extracted from your media.
 We also allow the user to create custom import scripts, so everyone has
 the possibility to adapt the layout to one's personal needs.
 Read more about this in the installation section.
\end_layout

\begin_layout Standard
The main problem with this library is, that it is called differently on
 various distros and that it is installed in different locations.
 For example, it is called js on Fedora, but is available under the name
 of smjs on Debian.
 If configure fails to find your js headers and libraries you can point
 it to the desired locatoins (see options below).
\end_layout

\begin_layout Subsubsection
Filemagic Support
\end_layout

\begin_layout Code
--enable-libmagic
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
This library determines the file type and provides us with the appropriate
 mimetype information.
 It is very important to correctly determine the mimetype of your media
 - this information will be sent to your renderer.
 Based on the mimetype information, the renderer will decide if it can play/disp
lay the particular file or not.
 If autodetection returns strange mimetypes, you may want to do a check
 using the 'file' command (the 'file' package must be installed on your
 system).
 Assuming that you want to check somefile.avi enter the following in your
 terminal:
\end_layout

\begin_layout Code
file -i somefile.avi
\end_layout

\begin_layout Standard
This will print the detected mimetype, this is exactly the information that
 we use in MediaTomb.
 You can override autodetection by defining appropriate file extension to
 mimetype mappings in your configuration file.
 You can also edit the mimetype information of an imported object manually
 via the web UI.
\end_layout

\begin_layout Subsubsection
id3lib Support
\end_layout

\begin_layout Code
--enable-id3lib
\end_layout

\begin_layout Description
Default: enabled, preferred over taglib
\end_layout

\begin_layout Standard
This library will parse id3 tags of your MP3 files, the gathered information
 will be saved in the database and provided via UPnP.
 Further, the gathered metadata will be used by the import script to create
 a nice container layout (Audio/Arist/Album, etc.)
\end_layout

\begin_layout Subsubsection
taglib Support
\end_layout

\begin_layout Code
--enable-taglib
\end_layout

\begin_layout Description
Default: disabled if id3lib is available
\end_layout

\begin_layout Standard
This library will parse id3 tags of your MP3 files as well as information
 provided with flac files.
 It claims to be faster than id3lib, but it also seems to have some drawbacks.
 We had some cases where it crashed when trying to parse tags of certain
 MP3 files on embedded systems, we had reports and observed that it had
 problems parsing the samplerates.
 We also did some valgrinding and detected memory leaks.
 Our feeling is, that you will have more stable results with id3lib, however
 it is up to you to enable or disable this library.
 By default id3lib will be taken if both libraries are present on the system.
\end_layout

\begin_layout Subsubsection
libexif Support
\end_layout

\begin_layout Code
--enable-libexif
\end_layout

\begin_layout Description
Default: enabled
\end_layout

\begin_layout Standard
The exif library will gather metadata from your photos, it will also find
 exif thumbnails which are created automatically by most digital camera
 models.
 The gathered data will be used by the import script, the thumbnails will
 be offered as additional resources via UPnP.
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Subsection
Network Setup
\end_layout

\begin_layout Standard
Some systems require a special setup on the network interface.
 If MediaTomb exits with UPnP Error -117, or if it does not respond to M-SEARCH
 requests from the renderer (i.e.
 MediaTomb is running, but your renderer device does not show it) you should
 try the following settings (the lines below assume that MediaTomb is running
 on a Linux machine, on network interface eth1):
\end_layout

\begin_layout Code
route add -net 239.0.0.0 netmask 255.0.0.0 eth1
\end_layout

\begin_layout Code
ifconfig eth1 allmulti
\end_layout

\begin_layout Standard
Those settings will be applied automatically by the init.d startup script.
\end_layout

\begin_layout Standard
You should also make sure that your firewall is not blocking port UDP port
 1900 (required for SSDP) and UDP/TCP port of MediaTomb.
 By default MediaTomb will select a free port starting with 49152, however
 you can specify a port of your choice in the configuration file.
\end_layout

\begin_layout Subsection
First Time Launch
\end_layout

\begin_layout Standard
Bla....
\end_layout

\end_body
\end_document
